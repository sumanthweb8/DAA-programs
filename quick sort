#include <stdio.h>


void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}


int Partition(int arr[], int s, int e) {
    int pivot = arr[e];
    int pIndex = s;

    for (int i = s; i < e; i++) {
        if (arr[i] <= pivot) {
            swap(&arr[i], &arr[pIndex]);
            pIndex++;
        }
    }

    swap(&arr[e], &arr[pIndex]);
    return pIndex;
}


void QuickSort(int arr[], int s, int e) {
    if (s < e) {
        int p = Partition(arr, s, e);
        QuickSort(arr, s, p - 1);
        QuickSort(arr, p + 1, e);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < arr_size; i++)
        printf("%d ", arr[i]);
    printf("\n");

    QuickSort(arr, 0, arr_size - 1);

    printf("Sorted array: ");
    for (int i = 0; i < arr_size; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}





time complexity 
Best Case:O(n log n).
Average Case:O(n log n)
Worst Case:O(n^2)
